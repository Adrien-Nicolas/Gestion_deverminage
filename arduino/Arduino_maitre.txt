#include <OneWire.h>
#include <DallasTemperature.h>
#include <SPI.h>
#include <Ethernet.h>


int signalIdEssai = 2;

//capteur de température et humidité

OneWire oneWire (7);
DallasTemperature sensors(&oneWire);
DeviceAddress sensorDeviceAddress;

int frequencyTemp = 20000;

//Nombre de cycle
unsigned long nbcycle = 0;

//fréquence du modulo
int frequency = 2000;

// seuil de conformité
int seuil0 = 0;
int seuil1 = 0;
int seuil2 = 0;
int seuil3 = 0;
int seuil4 = 0;
int seuil5 = 0;
int seuil6 = 0;


int validCap0 = 1;
int validCap1 = 1;
int validCap2 = 1;
int validCap3 = 1;
int validCap4 = 1;
int validCap5 = 1;
int validCap6 = 1;

int nbrCapValid =0;


//Nombre de capteurs
int nbCap=7;
int list[7];

// id de l'essai
int idEssai = 0;
int pos = 1;

// variables des photorésistances
int a1 = 0;
int a2 = 0;
int a3 = 0;
int a4 = 0;
int a5 = 0;
int a6 = 0;
int a7 = 0;


int idCap1 = -1;
int idCap2 = -1;
int idCap3 = -1;
int idCap4 = -1;
int idCap5 = -1;
int idCap6 = -1;
int idCap7 = -1;


// variables du démarage des acquisitions de données
int cinqv = 8;
int val = 0;
int ret = 0;

// parametrage du micro controlleur
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
char server[] = "dev.epl.local";

IPAddress ip(192, 168, 0, 177);
IPAddress myDns(192, 168, 0, 1);

EthernetClient client;

// Variables de mesure de la vitesse
unsigned long beginMicros, endMicros;
unsigned long byteCount = 0;
bool printWebData = false;

/**
 * Méthode permettant de créer un essai dans la base de données, et de retourner son ID
 *
 */
void createEssai() {

    if (client.connect(server, 80)) {
       Serial.println("connected");
       client.println("GET /php/arduino/createEssai.php HTTP/1.0");
       client.println();

    } else {
      Serial.println("connection failed");
    }
    String c;

    while (client.connected()){
      if(client.available()){
        char letter = client.read();
        String myString = String(letter);
        c += myString;
       
      }
    }
    int index = c.indexOf("<p>")+3;
    int index2 = c.indexOf("</p>");

    String ret = "";

    for (int i =index; i<index2; i++) ret += c[i];
    idEssai = ret.toInt();
    Serial.println("essai =");
     Serial.println(idEssai);
    
}


/**
 * Méthode permettant de recuperer le seuil d'un produit en fonction de son idCapteur
 *
 */
int getSeuil(int idCap) {

 
    if (client.connect(server, 80)) {
       Serial.println("connected");
       client.println("GET /php/arduino/getSeuil.php?idCap=" + String (idCap) + " HTTP/1.0");
       client.println();

    } else {
      Serial.println("connection failed");
    }
    String c;

    while (client.connected()){
      if(client.available()){
        char letter = client.read();
        String myString = String(letter);
        c += myString;
       
      }
    }
    int index = c.indexOf("<p>")+3;
    int index2 = c.indexOf("</p>");

    String ret = "";

    for (int i =index; i<index2; i++) ret += c[i];
    return ret.toInt();


  }




/**
 * Méthode permettant de créer les capteurs dans la base de données, et de retourner leurs ID sous forme de liste
 *
 * @param EthernetClient
 * @param int
 * @param int
 */

 
void createCap() {

  for(int i = 0; i<nbCap; i++) {
    Serial.println(nbCap);
    
    if (client.connect(server, 80)) {
       Serial.println("connected");
       int posi = pos+i;
       client.println("GET /php/arduino/createCap.php?idessai="+ String(idEssai) +"&position="+ String(posi) +" HTTP/1.0");
       client.println();

    } else {
      Serial.println("connection failed");
    }
    String c;

    while (client.connected()){
      if(client.available()){
        char letter = client.read();
        String myString = String(letter);
        c += myString;
      }
    }
    int index = c.indexOf("<p>")+3;
    int index2 = c.indexOf("</p>");

    String ret = "";

    for (int i =index; i<index2; i++) ret += c[i];
    list[i] = ret.toInt();
  
  }
  
}


/**
 * Méthode permettant d'insérer les données d'une température
 *
 * @param int
 * @param int
 * @param int
 *
 */

void push(int idessai, unsigned long time, float value){
    String data = "idessai=" + String(idessai) + "&time=" + String(time) + "&value=" + String(value);
    if (client.connect("dev.epl.local",80) ) {
      client.println("POST /php/arduino/pushTemp.php HTTP/1.1");
      client.println("Host: dev.epl.local");
      client.println("Content-Type: application/x-www-form-urlencoded");
      client.print("Content-Length: ");
      client.println(data.length());
      client.println();
      client.print(data);
    } else {
      // if you didn't get a connection to the server:
      Serial.println("connection failed");
    }
}

/**
 * Méthode permettant d'insérer les données d'un capteur
 *
 * @param int
 * @param int
 * @param int
 *
 */

void push(int value, int idCap, unsigned long time){
  int valid = 1;
    
    
    if (a1 <= seuil6 && validCap6 !=0 )valid = 0;
    if (a2 <= seuil4 && validCap4 !=0) valid = 0;
    if (a3 <= seuil5 && validCap5 !=0) valid = 0;
    if (a4 <= seuil2 && validCap2 !=0 )valid = 0;
    if (a5 <= seuil3 && validCap3 !=0) valid = 0;
    if (a6 <= seuil0 && validCap0 !=0) valid = 0;
    if (a7 <= seuil1 && validCap1 !=0 )valid = 0;
   

    
    String data = "value=" + String(value) + "&time=" + String(time) + "&valid=" + String(valid) + "&idCap=" + String(idCap);
    if (client.connect("dev.epl.local",80) ) {
      client.println("POST /php/arduino/pushValue.php HTTP/1.1");
      client.println("Host: dev.epl.local");
      client.println("Content-Type: application/x-www-form-urlencoded");
      client.print("Content-Length: ");
      client.println(data.length());
      client.println();
      client.print(data);
    } else {
      // if you didn't get a connection to the server:
      Serial.println("connection failed");
    }
}

/**
 * Méthode permettant d'insérer les données d'un capteur avec une valeur à zero mais valide
 *
 * @param int
 * @param int
 * @param int
 *
 */

void pushzero(int idCap, unsigned long time){
    String data = "value=0&time=" + String(time) + "&valid=1&idCap=" + String(idCap);
    if (client.connect("dev.epl.local",80) ) {
      client.println("POST /php/arduino/pushValue.php HTTP/1.1");
      client.println("Host: dev.epl.local");
      client.println("Content-Type: application/x-www-form-urlencoded");
      client.print("Content-Length: ");
      client.println(data.length());
      client.println();
      client.print(data);
    } else {
      // if you didn't get a connection to the server:
      Serial.println("connection failed");
    }
}



void setup() {


 pinMode(signalIdEssai, OUTPUT);



 /**
  * Configuration de l'acquisition du capteur de temperature DS18B20
  */
  sensors.begin();
  sensors.getAddress(sensorDeviceAddress, 0); //Demande l'adresse du capteur à l'index 0 du bus
  sensors.setResolution(sensorDeviceAddress, 12); //Résolutions possibles: 9,10,11,12n}


  /**
   * Designation de l'entrée 5v en tant qu'entrée
   */
  pinMode(cinqv, INPUT);
  unsigned long(millis());


/**
 * Lancement du port série
 */
  Serial.begin(9600);
  while (!Serial) {
    ;
  }

  /**
   * Parametrage DHCP
   */
  Serial.println("Initialize Ethernet with DHCP:");
  if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to configure Ethernet using DHCP");
    if (Ethernet.hardwareStatus() == EthernetNoHardware) {
      Serial.println("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
      while (true) {
        delay(1);
      }
    }
    if (Ethernet.linkStatus() == LinkOFF) {
      Serial.println("Ethernet cable is not connected.");
    }
    Ethernet.begin(mac, ip, myDns);
  } else {
    Serial.print(" DHCP assigned IP ");
    Serial.println(Ethernet.localIP());
  }
  delay(1000);
  Serial.print("connecting to ");
  Serial.print(server);
  Serial.println("...");



  beginMicros = micros();

  //Création de l'essai
  createEssai();
  Serial.println(idEssai);
  //Création et affectation des capteurs



if(analogRead(A0) > 2){
  nbCap -= 1;
  validCap0 = 0;
}

if(analogRead(A1) > 2){
  nbCap -= 1;
   validCap1 = 0;
}

if(analogRead(A2) > 2){
  nbCap -=1;
   validCap2 = 0;
}

 if(analogRead(A3) > 2){
  nbCap -= 1;
  validCap3 = 0;
}

if(analogRead(A4) > 2){
  nbCap -= 1;
   validCap4 = 0;
}

if(analogRead(A8) > 2){
  nbCap -=1;
   validCap5 = 0;
}

 if(analogRead(A9) > 2){
  nbCap -= 1;
  validCap6 = 0;
}


  createCap();

  
 if (validCap0 == 1){
 nbrCapValid+=1;  
 }else{
  Serial.println("Le capteur A6 ne possede pas de tube");
 }
 
  
  if (validCap1 == 1){
 nbrCapValid+=1;
   }else{
    Serial.println("Le capteur A7 ne possede pas de tube");
   }
  
  if (validCap2 == 1){
  nbrCapValid+=1;
  }else{
    Serial.println("Le capteur A4 ne possede pas de tube");
  }

  
 if (validCap3 == 1){
 nbrCapValid+=1;  
 }else{
  Serial.println("Le capteur A5 ne possede pas de tube");
 }
 
  
  if (validCap4 == 1){
 nbrCapValid+=1;
   }else{
    Serial.println("Le capteur A2 ne possede pas de tube");
   }
  
  if (validCap5 == 1){
  nbrCapValid+=1;
  }else{
    Serial.println("Le capteur A3 ne possede pas de tube");
  }

  
 if (validCap6 == 1){
 nbrCapValid+=1;  
 }else{
  Serial.println("Le capteur A1 ne possede pas de tube");
 }

Serial.println(analogRead(A0));
Serial.println(analogRead(A1));
Serial.println(analogRead(A2));
Serial.println(analogRead(A3));
Serial.println(analogRead(A4));
Serial.println(analogRead(A8));
Serial.println(analogRead(A9));




for(int i=0; i<nbrCapValid; i++){
 


 if( validCap6 == 1 ){
  idCap7 = list[i];
  list[i++];
 }

  
  
  if(validCap4 == 1){
    idCap5 = list[i];
    list[i++];
  }



 if(validCap5 == 1){
    idCap6 = list[i];
   list[i++];
  }




 if( validCap2 == 1 ){
  idCap3 = list[i];
  list[i++];
 }

  
  
  if(validCap3 == 1){
    idCap4 = list[i];
    list[i++];
  }



 if(validCap0 == 1){
    idCap1 = list[i];
   list[i++];
  }



 if( validCap1 == 1 ){
  idCap2 = list[i];
 }


  
}

 

while (seuil6 == 0 && validCap6 != 0){
  delay(1000);
  seuil6 = getSeuil(idCap7);
  Serial.println(seuil6);
}


while(seuil4 == 0 && validCap4 !=0){
  delay(1000);
  seuil4 = getSeuil(idCap5);
Serial.println(seuil4);
}


while(seuil5 == 0 && validCap5 != 0){
  delay(1000);
  seuil5 = getSeuil(idCap6);
Serial.println(seuil5);
}


while(seuil2 == 0 && validCap2 != 0){
  delay(1000);
  seuil2 = getSeuil(idCap3);
  Serial.println(seuil2);
}


while(seuil3 == 0 && validCap3 !=0){
  delay(1000);
  seuil3 = getSeuil(idCap4);
Serial.println(seuil3);
}


while(seuil0 == 0 && validCap0 != 0){
  delay(1000);
  seuil0 = getSeuil(idCap1);
Serial.println(seuil0);
}

while(seuil1 == 0 && validCap1 != 0){
  delay(1000);
  seuil1 = getSeuil(idCap2);
  Serial.println(seuil1);
}


}


void loop() {

  
  if ( nbcycle%frequencyTemp==0) {
      sensors.requestTemperatures();
      float temp = sensors.getTempCByIndex(0);
      push(idEssai,(unsigned long) millis() ,temp);
      Serial.println(temp);
  }

  //Récuperation des valeurs des photoresistances
  a7 = analogRead(A1);
  a5 = analogRead(A3);
  a6 = analogRead(A0);
  a3 = analogRead(A8);
  a4 = analogRead(A2);
  a1 = analogRead(A9);
  a2 = analogRead(A4);


  //Recupération d'une tension d'entrée de 5V
  val = digitalRead(cinqv);

  //Variables de récupération du temps
  String t2 = String((unsigned long) millis());


  //Envoie d'une donnée 0 quand il reçoit un changement d'état de la tension d'entrée
  if (val != ret) {
      Serial.println("attention c'est débranché");
      pushzero(idCap1, (unsigned long) millis());
      pushzero(idCap2, (unsigned long) millis());
      pushzero(idCap3, (unsigned long) millis());
      pushzero(idCap4, (unsigned long) millis());
      pushzero(idCap5, (unsigned long) millis());
      pushzero(idCap6, (unsigned long) millis());
      pushzero(idCap7, (unsigned long) millis());

  }


  //Simplification de l'affichage et de la vitesse de traitement du port série
  int len = client.available();
  if (len > 0) {
    byte buffer[80];
    if (len > 80) len = 80;
    client.read(buffer, len);
    if (printWebData) {
      Serial.write(buffer, len);
    }
    byteCount = byteCount + len;
  }



  //Envoie les valeurs des photoresistances lorsque la tension d'entrée est à 5V
  if (val == HIGH){

    if ( (nbcycle%frequency==0 || a1<seuil6) && validCap6 !=0 ) {
      push(a1, idCap7, (unsigned long) millis());
      Serial.println("here");
    }
    
    
    if ( (nbcycle%frequency==0 || a2<seuil4) && validCap4 !=0) {
      push(a2, idCap5, (unsigned long) millis());

    }
    
    
    if ( (nbcycle%frequency==0 || a3<seuil5) && validCap5 !=0 ) {
      push(a3, idCap6, (unsigned long) millis());

    }

if ( (nbcycle%frequency==0 || a4<seuil2) && validCap2 !=0 ) {
      push(a4, idCap3, (unsigned long) millis());

    }
    
    
    if ( (nbcycle%frequency==0 || a5<seuil3) && validCap3 !=0) {
      push(a5, idCap4, (unsigned long) millis());

    }
    
    
    if ( (nbcycle%frequency==0 || a6<seuil0) && validCap0 !=0 ) {
      push(a6, idCap1, (unsigned long) millis());

    }

    if ( (nbcycle%frequency==0 || a7<seuil1) && validCap1 !=0 ) {
      push(a7, idCap2, (unsigned long) millis());

    }
    

  }

  ret = val;
  nbcycle++;
}